% SECURE DECLARATIVE UNBUNDLED
local NewWrapper in
   proc {NewWrapper Wrap Unwrap}
      local Key = {NewName} in
	 fun {Wrap X}
	    fun {$ K}
	       if (K==Key) then X end
	    end
	 end
	 fun {Unwrap W}
	    {W Key}
	 end
      end
   end

   local Stack S2 S3 S4 S S5 Val Val2 Wrap Unwrap in
      local
	 {NewWrapper Wrap Unwrap}
	 fun {NewStack} {Wrap nil} end
	 fun {Push S E} {Wrap E|{Unwrap S}} end
	 fun {Pop S ?E} case {Unwrap S} of X|S1 then E=X  {Wrap S1} end end
	 fun {IsEmpty S} {Unwrap S}==nil end
      in
	 Stack=stack(new:NewStack push:Push pop:Pop isEmpty:IsEmpty)
      end
      S = {Stack.new}
      S2 = {Stack.push S 4}
      S3 = {Stack.push S2 10}
      S4 = {Stack.pop S3 Val}
      try
	  S5 = {Stack.pop [3 14 10 9 8] Val2} % Esto no se puede porque es seguro, tira una excepcion
      catch Exc then
	 {Browse Exc}
      end
      {Browse S}
      {Browse S2}
      {Browse S3}
      {Browse Val}
      {Browse S4}
      {Browse Val2}
      {Browse S5}
   end
end

