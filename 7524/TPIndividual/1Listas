% EJERCICIO 1 LISTAS
% Length function
declare fun {Length Xs}
	   case Xs of nil then 0
	   [] H|T then 1 + {Length T}
	   end
	end

% Take function
declare fun {Take Xs N}
	   if N == 0 then nil
	   else
	      case Xs of nil then nil
	      [] H|T then H|{Take T N-1}
	      end
	   end 
	end

% Drop function
declare fun {Drop Xs N}
	   if N == 0 then Xs
	   else
	      case Xs of nil then nil
	      [] H|T then {Drop T N-1}
	      end
	   end
	end
	
% Append function
declare fun {Append Xs Ys}
	   if Ys == nil then Xs
	   else
	      case Xs of nil then Ys
	      [] H|T then H|{Append T Ys}
	      end
	   end
	end

% invocation examples Length
{Show 'Length examples'}
{Show {Length [1 2 10]}}
{Show {Length [1 2 10 'test']}}
{Show {Length ['a' 'b' 'c']}}
{Show {Length ['a' 'b' 'c' 4 5 6 7 8 9 10]}}

% invocation examples Take
{Show 'Take examples'}
{Show {Take [1 2 10 15] 2}}
{Show {Take [1 2 10 15] 8}}
{Show {Take [a b c d] 3}}
{Show {Take [a b c d] 4}}
{Show {Take [a b c d] 1}}
{Show {Take [a b c d] 0}}

% invocation examples Drop
{Show 'Drop examples'}
{Show {Drop [1 2 10 15] 2}}
{Show {Drop [1 2 10 15] 8}}
{Show {Drop [a b c d] 4}}
{Show {Drop [a b c d] 1}}
{Show {Drop [a b c d] 0}}

% invocation examples Append
{Show 'Append examples'}
{Show {Append [1 2 10 15] [a b c d]}}
{Show {Append [1 2 10 15] nil}}
{Show {Append nil [a b]}}
{Show {Append [1 2 10 15] [a]}}
{Show {Append [1] [a b]}}


